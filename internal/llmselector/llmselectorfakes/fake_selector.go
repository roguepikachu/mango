// Code generated by counterfeiter. DO NOT EDIT.
package llmselectorfakes

import (
	"context"
	"sync"

	"github.com/example/mango/internal/diff"
	"github.com/example/mango/internal/llmselector"
	"github.com/example/mango/internal/testmeta"
)

type FakeSelector struct {
	SelectStub        func(context.Context, []diff.Change, []testmeta.Metadata) ([]testmeta.Metadata, error)
	selectMutex       sync.RWMutex
	selectArgsForCall []struct {
		arg1 context.Context
		arg2 []diff.Change
		arg3 []testmeta.Metadata
	}
	selectReturns struct {
		result1 []testmeta.Metadata
		result2 error
	}
	selectReturnsOnCall map[int]struct {
		result1 []testmeta.Metadata
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSelector) Select(arg1 context.Context, arg2 []diff.Change, arg3 []testmeta.Metadata) ([]testmeta.Metadata, error) {
	var arg2Copy []diff.Change
	if arg2 != nil {
		arg2Copy = make([]diff.Change, len(arg2))
		copy(arg2Copy, arg2)
	}
	var arg3Copy []testmeta.Metadata
	if arg3 != nil {
		arg3Copy = make([]testmeta.Metadata, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.selectMutex.Lock()
	ret, specificReturn := fake.selectReturnsOnCall[len(fake.selectArgsForCall)]
	fake.selectArgsForCall = append(fake.selectArgsForCall, struct {
		arg1 context.Context
		arg2 []diff.Change
		arg3 []testmeta.Metadata
	}{arg1, arg2Copy, arg3Copy})
	stub := fake.SelectStub
	fakeReturns := fake.selectReturns
	fake.recordInvocation("Select", []interface{}{arg1, arg2Copy, arg3Copy})
	fake.selectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSelector) SelectCallCount() int {
	fake.selectMutex.RLock()
	defer fake.selectMutex.RUnlock()
	return len(fake.selectArgsForCall)
}

func (fake *FakeSelector) SelectCalls(stub func(context.Context, []diff.Change, []testmeta.Metadata) ([]testmeta.Metadata, error)) {
	fake.selectMutex.Lock()
	defer fake.selectMutex.Unlock()
	fake.SelectStub = stub
}

func (fake *FakeSelector) SelectArgsForCall(i int) (context.Context, []diff.Change, []testmeta.Metadata) {
	fake.selectMutex.RLock()
	defer fake.selectMutex.RUnlock()
	argsForCall := fake.selectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSelector) SelectReturns(result1 []testmeta.Metadata, result2 error) {
	fake.selectMutex.Lock()
	defer fake.selectMutex.Unlock()
	fake.SelectStub = nil
	fake.selectReturns = struct {
		result1 []testmeta.Metadata
		result2 error
	}{result1, result2}
}

func (fake *FakeSelector) SelectReturnsOnCall(i int, result1 []testmeta.Metadata, result2 error) {
	fake.selectMutex.Lock()
	defer fake.selectMutex.Unlock()
	fake.SelectStub = nil
	if fake.selectReturnsOnCall == nil {
		fake.selectReturnsOnCall = make(map[int]struct {
			result1 []testmeta.Metadata
			result2 error
		})
	}
	fake.selectReturnsOnCall[i] = struct {
		result1 []testmeta.Metadata
		result2 error
	}{result1, result2}
}

func (fake *FakeSelector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.selectMutex.RLock()
	defer fake.selectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSelector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ llmselector.Selector = new(FakeSelector)
